options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)//importimport com.sleepycat.je.Database;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;import java.io.File;import java.util.ArrayList;class Table {  ArrayList<String>  public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SELECT = 4;  public static final int PRINT_INSERT = 5;  public static final int PRINT_DELETE = 6;  public static final int PRINT_SHOW_TABLES = 7;    public static void main(String args[]) throws ParseException  {    //Environment & Database define    Environment myDbEnvironment = null;    Database myDatabase = null;    /* OPENING DB */		//Open Database Environment or if not, create one.		EnvironmentConfig envConfig = new EnvironmentConfig();		envConfig.setAllowCreate(true);		myDbEnvironment = new Environment(new File("db/"), envConfig);		//Open Database or if not, create one.		DatabaseConfig dbConfig = new DatabaseConfig();		dbConfig.setAllowCreate(true);		dbConfig.setSortedDuplicates(true);		myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);	    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2013-11408> ");	boolean exit = false;    while (!exit)    {      try      {        exit = parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }    if(myDatabase != null) myDatabase.close();    if(myDbEnvironment != null) myDbEnvironment.close();    System.exit(0);  }  public static void printMessage(int q)  {        switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;    }    System.out.print("DB_2013-11408> ");      }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < AND : "and" >| < OR : "or" >| < NOT : "not" >| < IS : "is" >| < NULL : "null" >| < INSERT : "insert" >| < INTO : "into" >| < VALUES : "values" >| < DELETE : "delete" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < ALL : "*" >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN > >| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > >| < NN : < DIGIT >< DIGIT > >| < PERIOD : "." >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >	| < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < QUOTE : "'" >| < NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%"	| "^" | "&" | "*" | "(" | ")" | "-" | "_" | "+" | "="	| "\\" | "|" | "{" | "}" | "[" | "]" | ":" | ";" | "~"	| "`" | "<" | ">" | "," | < PERIOD > | "?" | "/" > }boolean command(Database tableDb) :{}{  queryList(tableDb)  {    return false;  }| (    < EXIT >    < SEMICOLON >    {      return true;    }  ) }void queryList(Database tableDb) :{  int q;}{  (    q = query(tableDb)    < SEMICOLON >    {      printMessage(q);    }  )+}int query(Database tableDb) :{  int q;}{(      (	createTableQuery(tableDb)	{	  q = PRINT_CREATE_TABLE;	}  )|   (        dropTableQuery(tableDb)    {      q = PRINT_DROP_TABLE;    }  )|   (    descQuery(tableDb)    {      q = PRINT_DESC;    }  )|   (    selectQuery()    {      q = PRINT_SELECT;    }  )|   (    insertQuery()    {      q = PRINT_INSERT;    }  )|   (    deleteQuery()    {      q = PRINT_DELETE;    }  )|   (    showTablesQuery(tableDb)    {      q = PRINT_SHOW_TABLES;    }  ))  (    {      return q;    }  )}//CREATE TABLEvoid createTableQuery(Database tableDb) :{  String tn;  ArrayList<String> teList; }{  < CREATE_TABLE >  tn = tableName()  teList = tableElementList()  {    createDb(tn, teList, tableDb);  }}ArrayList<String> tableElementList() :{  ArrayList<String> teList = new ArrayList<String>();  String te;}{  < LEFT_PAREN >  te = tableElement()  {    teList.add(te);  }  (    < COMMA >    tableElement()    {      teList.add(te);    }  )*  < RIGHT_PAREN >}String tableElement() :{  String columnDef;  String tableConsDef;}{  columnDef = columnDefinition()  {    return columnDef;  }| tableConsDef = tableConstraintDefinition()  {    return tableConsDef;  }}//return columnDefinition String like "*colDef:(columnName):(dataType):(nullable)"String columnDefinition() :{  String colDef;  String cn;  String dt;  String nullable = "Y";}{  cn = columnName()  dt = dataType()  (    < NOT_NULL >    {      nullable = "N";    }  )?  {    colDef = "*colDef:" + cn + ":" + dt + ":" + nullable;    return colDef;  }}String tableConstraintDefinition() :{  String pk;  String fk;}{  pk = primaryKeyConstraint()  {    return pk;  }|  fk = referentialConstraint()  {    return fk;  }}//return pk list like "*pkConstraint:(PK1):(PK2):...:(PK_N)"String primaryKeyConstraint() :{  String cnList;}{  < PRIMARY_KEY >  cnList = columnNameList()  {    return "*pkConstraint" + cnList;  }}//return fk list like "*fkConstraint:(fk1):(fk2):...:(fk_n):*ref:(tableName):..."String referentialConstraint() :{  String fkList;  String refList;  String tn;}{  < FOREIGN_KEY >  fkList = columnNameList()  < REFERENCES >  tn = tableName()  refList = columnNameList()  {    return "*fkConstraint" + fkList + ":*ref:" + tn + refList;  }}//return columnNmaeList like ":(cn1):(cn2):...:(cn_n)"String columnNameList() :{  String cnList = "";  String cn;}{  < LEFT_PAREN >  cn = columnName()  {    cnList += ":" + cn;  }  (    < COMMA >    cn = columnName()    {      cnList += ":" + cn;    }  )*  < RIGHT_PAREN >  {    return cnList;  }}String dataType() :{  Token intVal;}{  < INT >  {    return "int";  }| (    < CHAR >    < LEFT_PAREN >    intVal = < INT_VALUE >    < RIGHT_PAREN >    {      return "char(" + intVal.image + ")";    }  )| < DATE >  {    return "date";  }}//return lowerCase nameString tableName() :{  Token legId;}{  legId = < LEGAL_IDENTIFIER >  {    return legId.image.toLowerCase();  }}String columnName() :{  Token legId;}{  legId = < LEGAL_IDENTIFIER >  {    return legId.image.toLowerCase();  }}//DROP TABLEvoid dropTableQuery(Database tableDb) :{  String tn;}{  < DROP_TABLE >  tn = tableName()  {    dropDb(tn, tableDb);  }}//DESCvoid descQuery(Database tableDb) :{  String tn;}{  < DESC >  tn = tableName()  {    descDb(tn, tableDb);  }}//SHOW TABLESvoid showTablesQuery(Database tableDb) :{}{  < SHOW_TABLES >  {    showDb(tableDb);  }}//SELECTvoid selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}// select column. ex) select * / select a, b, ...void selectList() :{}{  < ALL >| selectedColumn()  (    < COMMA >    selectedColumn()  )*}//column. name.first, cake_name, ...void selectedColumn() :{}{  (    LOOKAHEAD(2)	tableName()    < PERIOD >  )?  columnName()  (    LOOKAHEAD(2)    < AS >    columnName()  )?}//from table_name (where ...)void tableExpression() :{}{  (	fromClause()	(whereClause())?  )}void fromClause() :{}{  (	<FROM>	tableReferenceList()  )}//table list. student (, professor, ...)void tableReferenceList() :{}{  (	referedTable()	(<COMMA> referedTable())*  )}// when renaming. student as svoid referedTable() :{}{  (	tableName()	(<AS> tableName())?  )}// where ~void whereClause() :{}{  (	<WHERE>	booleanValueExpression()  )}// boolean Expression of where, with operation 'OR'void booleanValueExpression() :{}{  (	booleanTerm()	(	  <OR> booleanTerm()	)*  )}// boolean expression with operation 'AND'void booleanTerm() :{}{  (    booleanFactor()    (      < AND >      booleanFactor()    )*  )}// with Not operationvoid booleanFactor() :{}{  (	(	  <NOT>	)?	booleanTest()  )}void booleanTest() :{}{  (	predicate() |	parenthesizedBooleanExpression()  )}// if there are more than 1 boolean expression, use paren void parenthesizedBooleanExpression() :{}{  (	<LEFT_PAREN>	booleanValueExpression()	<RIGHT_PAREN>  )}// comparison boolean value or is null boolean valuevoid predicate() :{}{  (    LOOKAHEAD(4)	comparisonPredicate() |	nullPredicate()  )}// like a = bvoid comparisonPredicate() :{}{  (    	compOperand()	compOp()	compOperand()  )}void compOperand() :{}{  (    comparableValue() |    (      LOOKAHEAD(2)      tableName()      < PERIOD >    )? columnName()  )}void compOp() :{}{  (    " < " |    " > " |    " = " |    " >= " |    " <= " |    " != "  )}void comparableValue() :{}{  (    < INT_VALUE > |    < CHAR_STRING > |    < DATE_VALUE >  )}void nullPredicate() :{}{  (    nullOperand()    nullOperation()  )}void nullOperand() :{}{  (    (      LOOKAHEAD(2)      tableName()      < PERIOD >    )? columnName()  )}void nullOperation() :{}{  (    < IS >    (      < NOT_NULL > |      (        < NOT >      )?      < NULL >    )  )}//INSERT QUERYvoid insertQuery() :{}{  (    < INSERT >    < INTO >    tableName()    insertColumnsAndSource()  )}void insertColumnsAndSource() :{}{  (    (      columnNameList()    )?    valueList()  )}void valueList() :{}{  (    < VALUES >    < LEFT_PAREN >    value()    (      < COMMA >      value()    )*    < RIGHT_PAREN >  )}void value() :{}{  (    < NULL > |    comparableValue()  )}//DELETE QUERYvoid deleteQuery() :{}{  (    < DELETE >    < FROM >    tableName()    (      whereClause()    )?  )}	