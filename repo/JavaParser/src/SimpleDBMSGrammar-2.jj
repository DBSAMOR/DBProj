options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)//importimport com.sleepycat.je.Database;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;import java.io.File;public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SELECT = 4;  public static final int PRINT_INSERT = 5;  public static final int PRINT_DELETE = 6;  public static final int PRINT_SHOW_TABLES = 7;    public static void main(String args[]) throws ParseException  {    //Environment & Database define    Environment myDbEnvironment = null;    Database myDatabase = null;    /* OPENING DB */	//Open Database Environment or if not, create one.	EnvironmentConfig envConfig = new EnvironmentConfig();	envConfig.setAllowCreate(true);	myDbEnvironment = new Environment(new File("db/"), envConfig);	//Open Database or if not, create one.	DatabaseConfig dbConfig = new DatabaseConfig();	dbConfig.setAllowCreate(true);	dbConfig.setSortedDuplicates(true);	myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);	    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2013-11408> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {        switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;    }    System.out.print("DB_2013-11408> ");      }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < AND : "and" >| < OR : "or" >| < NOT : "not" >| < IS : "is" >| < NULL : "null" >| < INSERT : "insert" >| < INTO : "into" >| < VALUES : "values" >| < DELETE : "delete" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < ALL : "*" >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN > >| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT > >| < NN : < DIGIT >< DIGIT > >| < PERIOD : "." >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >	| < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < QUOTE : "'" >| < NON_QUOTE_SPECIAL_CHARACTERS : "!" | "@" | "#" | "$" | "%"	| "^" | "&" | "*" | "(" | ")" | "-" | "_" | "+" | "="	| "\\" | "|" | "{" | "}" | "[" | "]" | ":" | ";" | "~"	| "`" | "<" | ">" | "," | < PERIOD > | "?" | "/" > }void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{(      (	createTableQuery()	{	  q = PRINT_CREATE_TABLE;	}  )|   (        dropTableQuery()    {      q = PRINT_DROP_TABLE;    }  )|   (    descQuery()    {      q = PRINT_DESC;    }  )|   (    selectQuery()    {      q = PRINT_SELECT;    }  )|   (    insertQuery()    {      q = PRINT_INSERT;    }  )|   (    deleteQuery()    {      q = PRINT_DELETE;    }  )|   (    showTablesQuery()    {      q = PRINT_SHOW_TABLES;    }  ))  (    {      return q;    }  )}//CREATE TABLEvoid createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT_NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}//DROP TABLEvoid dropTableQuery() :{}{  < DROP_TABLE >  tableName()}//DESCvoid descQuery() :{}{  < DESC >  tableName()}//SHOW TABLESvoid showTablesQuery() :{}{  < SHOW_TABLES >}//SELECTvoid selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}// select column. ex) select * / select a, b, ...void selectList() :{}{  < ALL >| selectedColumn()  (    < COMMA >    selectedColumn()  )*}//column. name.first, cake_name, ...void selectedColumn() :{}{  (    LOOKAHEAD(2)	tableName()    < PERIOD >  )?  columnName()  (    LOOKAHEAD(2)    < AS >    columnName()  )?}//from table_name (where ...)void tableExpression() :{}{  (	fromClause()	(whereClause())?  )}void fromClause() :{}{  (	<FROM>	tableReferenceList()  )}//table list. student (, professor, ...)void tableReferenceList() :{}{  (	referedTable()	(<COMMA> referedTable())*  )}// when renaming. student as svoid referedTable() :{}{  (	tableName()	(<AS> tableName())?  )}// where ~void whereClause() :{}{  (	<WHERE>	booleanValueExpression()  )}// boolean Expression of where, with operation 'OR'void booleanValueExpression() :{}{  (	booleanTerm()	(	  <OR> booleanTerm()	)*  )}// boolean expression with operation 'AND'void booleanTerm() :{}{  (    booleanFactor()    (      < AND >      booleanFactor()    )*  )}// with Not operationvoid booleanFactor() :{}{  (	(	  <NOT>	)?	booleanTest()  )}void booleanTest() :{}{  (	predicate() |	parenthesizedBooleanExpression()  )}// if there are more than 1 boolean expression, use paren void parenthesizedBooleanExpression() :{}{  (	<LEFT_PAREN>	booleanValueExpression()	<RIGHT_PAREN>  )}// comparison boolean value or is null boolean valuevoid predicate() :{}{  (    LOOKAHEAD(2)	comparisonPredicate() |	nullPredicate()  )}// like a = bvoid comparisonPredicate() :{}{  (    	compOperand()	compOp()	compOperand()  )}void compOperand() :{}{  (    comparableValue() |    (      LOOKAHEAD(2)      tableName()      < PERIOD >    )? columnName()  )}void compOp() :{}{  (    " < " |    " > " |    " = " |    " >= " |    " <= " |    " != "  )}void comparableValue() :{}{  (    < INT_VALUE > |    < CHAR_STRING > |    < DATE_VALUE >  )}void nullPredicate() :{}{  (    nullOperand()    nullOperation()  )}void nullOperand() :{}{  (    (      LOOKAHEAD(2)      tableName()      < PERIOD >    )? columnName()  )}void nullOperation() :{}{  (    < IS >    (      < NOT_NULL > |      (        < NOT >      )?      < NULL >    )  )}//INSERT QUERYvoid insertQuery() :{}{  (    < INSERT >    < INTO >    tableName()    insertColumnsAndSource()  )}void insertColumnsAndSource() :{}{  (    (      columnNameList()    )?    valueList()  )}void valueList() :{}{  (    < VALUES >    < LEFT_PAREN >    value()    (      < COMMA >      value()    )*    < RIGHT_PAREN >  )}void value() :{}{  (    < NULL > |    comparableValue()  )}//DELETE QUERYvoid deleteQuery() :{}{  (    < DELETE >    < FROM >    tableName()    (      whereClause()    )?  )}	